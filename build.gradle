plugins {
    id 'com.github.ksoichiro.console.reporter' version '0.5.0'
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'maven'

group 'io.leonis'
version '0.0.7'
archivesBaseName = "zosma"
rootProject.description = 'the center of our universe'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    // for jamepad
    maven { url "https://jitpack.io" }
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

dependencies {
    // rx
    compile 'io.projectreactor:reactor-core:3.1.2.RELEASE'
    compile 'io.projectreactor.ipc:reactor-ipc:0.6.2.RELEASE'
    compile 'io.projectreactor.ipc:reactor-netty:0.7.2.RELEASE'

    // logging
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:slf4j-simple:1.7.25'

    // db
    compile 'org.influxdb:influxdb-java:2.8'

    // ipc
    compile 'com.github.WilliamAHartman:Jamepad:1.2'

    // java impl
    compile 'org.projectlombok:lombok:1.16.20'

    // tests
    testCompile 'org.testng:testng:6.13.1'
    testCompile 'io.projectreactor:reactor-test:3.1.2.RELEASE'
}

test {
    useTestNG()
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        showStandardStreams = true
    }
}

tasks.withType(Javadoc) {
  ext.capturedOutput = [ ]
  def listener = { ext.capturedOutput << it } as StandardOutputListener

  logging.addStandardErrorListener(listener)
  logging.addStandardOutputListener(listener)
  options.addStringOption('Xdoclint:all', '-quiet')

  doLast {
    logging.removeStandardOutputListener(listener)
    logging.removeStandardErrorListener(listener)
    ext.capturedOutput.join('').with { output ->
      if (output =~ /warning/) {
          throw new RuntimeException("Javadoc warning found: \n" + output)
      }
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar, sourcesJar
}

if (!project.hasProperty("signing.keyId") && System.getenv("signingKeyId") != null) {
    allprojects { ext."signing.keyId" = System.getenv("signingKeyId") }
}

if (!project.hasProperty("signing.password") && System.getenv("signingPassword") != null) {
    allprojects { ext."signing.password" = System.getenv("signingPassword") }
}

if (!project.hasProperty("signing.secretKeyRingFile") && System.getenv("signingSecretKeyRing") != null) {
    def file = new File("$projectDir/secring.gpg")
    file.createNewFile()
    file.text = System.getenv("signingSecretKeyRing")
    allprojects { ext."signing.secretKeyRingFile" = "$projectDir/secring.gpg" }
}

signing {
    sign configurations.archives
}

if (project.hasProperty("sign")) {
    signArchives.enabled = sign.toBoolean()
} else if (System.getenv("sign") != null) {
    signArchives.enabled = System.getenv("sign").toBoolean()
} else {
    signArchives.enabled = false
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                if (project.hasProperty("sonatypeUsername") && project.hasProperty("sonatypePassword")) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                } else if (System.getenv("sonatypeUsername") != null && System.getenv("sonatypePassword") != null) {
                    authentication(userName: System.getenv("sonatypeUsername"), password: System.getenv("sonatypePassword"))
                }
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                if (project.hasProperty("sonatypeUsername") && project.hasProperty("sonatypePassword")) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                } else if (System.getenv("sonatypeUsername") != null && System.getenv("sonatypePassword") != null) {
                    authentication(userName: System.getenv("sonatypeUsername"), password: System.getenv("sonatypePassword"))
                }
            }

            pom.project {
                name 'zosma'
                packaging 'jar'
                description 'the center of our universe'
                url 'https://github.com/delta-leonis/zosma/'

                licenses {
                    license {
                        name 'AGPL'
                        url 'https://github.com/delta-leonis/zosma/blob/master/LICENSE'
                        distribution 'repo'
                    }
                }
                scm {
                    url 'https://github.com/delta-leonis/zosma/'
                    connection 'scm:git:git://github.com/delta-leonis/zosma.git'
                    developerConnection 'scm:git:ssh://git@github.com/delta-leonis/zosma.git'
                }
                developers {
                    developer {
                        id 'romni'
                        name 'Rimon Oz'
                    }
                    developer {
                        id 'thumbnail'
                        name 'Jeroen de Jong'
                    }
                    developer {
                        id 'RyanMeulenkamp'
                        name 'Ryan Meulenkamp'
                    }
                    developer {
                        id 'ThomasHakkers'
                        name 'Thomas Hakkers'
                    }
                }
            }
        }
    }
}
