package io.leonis.zosma.ipc.peripheral;

import io.leonis.zosma.game.Identity;
import io.leonis.zosma.game.engine.Deducer;
import java.util.Map;
import org.reactivestreams.Publisher;
import reactor.core.publisher.Flux;

/**
 * The Interface ControllerDeducer.
 *
 * This interface describes the functionality of a {@link Deducer} which transforms mappings from
 * controllers to entities to the state of the controller as interpreted by the corresponding {@link
 * ControllerHandler}.
 *
 * @param <C> The type of controller.
 * @param <A> The type of entity which is being controlled by this deducer.
 * @param <I> The mapping of controllers to their corresponding entities.
 * @param <O> The type of output which is generated by this deducer.
 * @author Rimon Oz
 */
public interface ControllerDeducer<
    C extends Controller,
    A extends Identity.Supplier,
    I extends Controller.MappingSupplier<C, A>,
    O>
    extends Deducer<I, O> {

  /**
   * {@inheritDoc}
   */
  @Override
  default Publisher<O> apply(final Publisher<I> controllerPublisher) {
    return Flux.from(controllerPublisher)
        .flatMapIterable(controllerSupplier ->
            controllerSupplier.getAgentMapping().entrySet())
        .filter(controller ->
            this.getControllerMapping().containsKey(controller.getKey()))
        .map(controller ->
            this.getControllerMapping().get(controller.getKey()).apply(controller.getKey()));
  }

  /**
   * @return Mapping from {@link Controller} to the {@link ControllerHandler} which interprets the
   *     controls.
   */
  Map<C, ControllerHandler<C, O>> getControllerMapping();
}
